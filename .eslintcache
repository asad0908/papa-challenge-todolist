[{"F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\index.js":"1","F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\reportWebVitals.js":"2","F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\App.js":"3","F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\components\\TodoContainer.js":"4","F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\components\\TodoApp.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":564,"mtime":1611241117982,"results":"9","hashOfConfig":"7"},{"size":1015,"mtime":1611240180873,"results":"10","hashOfConfig":"7"},{"size":4178,"mtime":1611283620982,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1yk2kp6",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\index.js",[],["24","25"],"F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\reportWebVitals.js",[],"F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\App.js",[],"F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\components\\TodoContainer.js",["26"],"import React, { useEffect, useState } from \"react\";\r\nimport \"../css/TodoContainer.css\";\r\nimport TodoApp from \"./TodoApp\";\r\n\r\nconst TodoContainer = () => {\r\n  const [quotes, setQuotes] = useState([]);\r\n  const [selectedQuote, setSelectedQuote] = useState(null);\r\n  useEffect(() => {\r\n    const fetchQuotes = async () => {\r\n      const response = await fetch(\"https://type.fit/api/quotes\")\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setQuotes(data);\r\n          setSelectedQuote(data[Math.floor(Math.random() * data.length)]);\r\n        });\r\n    };\r\n\r\n    fetchQuotes();\r\n  }, []);\r\n\r\n  const changeQuote = () => {\r\n    setSelectedQuote(quotes[Math.floor(Math.random() * quotes.length)]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todoContainer\">\r\n      <div onClick={changeQuote} className=\"todoContainer__quotes\">\r\n        <h1>{selectedQuote?.text}</h1>\r\n        <h4>- {selectedQuote?.author}</h4>\r\n      </div>\r\n      <TodoApp />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoContainer;\r\n","F:\\Asad_Web\\ReactJS\\TODO CHALLENGE\\todolist-challenge\\src\\components\\TodoApp.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":10,"column":13,"nodeType":"33","messageId":"34","endLine":10,"endColumn":21},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]